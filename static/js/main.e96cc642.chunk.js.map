{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","CardArray","map","user","i","key","SearchBox","searchFields","searchChanges","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","SearchFields","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAgBeA,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAE3B,OACC,yBAAKC,UAAW,qDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,KAC/C,yBAAKC,UAAU,MACf,gCAAMH,EAAN,KACA,2BAAIC,MCgBSK,EAvBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACXC,EAAUD,EAAOE,KAAI,SAACC,EAAMC,GAEhC,OAAQ,kBAAC,EAAD,CACPC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAOrB,OACG,6BACOO,ICDIK,EAbC,SAAC,GAAgC,EAA/BC,aAAgC,IAAlBC,EAAiB,EAAjBA,cAC/B,OACC,6BACI,2BAEAC,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCADI,EAVD,SAACC,GAEd,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAS,kBAAmBC,OAAO,UACjEJ,EAAMK,SADV,MCmDaC,G,wDA9Cd,aAAc,IAAD,8BACZ,gBAcEC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACC,aAAcF,EAAMG,OAAOC,SAd7C,EAAKC,MAAM,CACV1B,OAAQ,GACRuB,aAAa,IAJF,E,gEASO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACtB,OAAQ+B,S,+BAQ/B,IAAD,OAEEC,EAAeC,KAAKP,MAAM1B,OAAOkC,QAAO,SAAAC,GAC7C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKX,MAAMH,aAAaa,kBAIrE,OACF,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAYY,cAAeyB,KAAKb,iBAChC,kBAAC,EAAD,KACE,sCACG,kBAAC,EAAD,CAAUpB,OAAQgC,W,GAlCPM,c,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e96cc642.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id})=> {\r\n\t\r\n\treturn(\r\n\t\t<div className ='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5  '>\r\n\t\t<img alt='robots' src={`https://robohash.org/${id}`}/>\r\n\t\t<div className='tc'>\r\n\t\t<h2> {name} </h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({robots})=>{\r\n  const CardArray=robots.map((user, i) =>\r\n  {\r\n\t  \treturn( <Card \r\n\t  \t\tkey={i} \r\n\t  \t\tid={robots[i].id} \r\n\t  \t\tname={robots[i].name} \r\n\t  \t\temail={robots[i].email}/>\r\n\t  \t\t);\r\n      }\r\n  \t)\r\n     \r\n\r\n\r\n\treturn(\r\n    <div>\r\n          {CardArray}\r\n    </div>\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst SearchBox=({searchFields, searchChanges})=>{\r\n\treturn(\r\n\t\t<div>\r\n      <input \r\n     \r\n      type='search'\r\n      placeholder='Search Robots'\r\n      onChange={searchChanges}\r\n      />\r\n      </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n \r\n return (\r\n  <div style={{overflowY: 'scroll', border : '1px solid black', height:'800px'}}>\r\n     {props.children};\r\n  </div>\r\n \t);\r\n};\r\n\r\n\r\nexport default Scroll;","import React , {Component} from 'react'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\n\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tSearchFields:''\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users => {this.setState({robots: users})});\r\n\t}\r\n\r\n    onSearchChange=(event)=> {\r\n    \tthis.setState({SearchFields: event.target.value})\r\n    }\r\n\r\n\r\n\trender(){\r\n     \r\n     const filterRobots = this.state.robots.filter(robot=>{\r\n     \treturn robot.name.toLowerCase().includes(this.state.SearchFields.toLowerCase())\r\n     })\r\n\r\n\r\n\t\treturn(\r\n<div className='tc'>\r\n \t<h1 className='f1'> ROBOFRIENDS </h1>\r\n \t<SearchBox  searchChanges={this.onSearchChange}/>\r\n \t<Scroll>\r\n \t  <errorBoundry>\r\n \t     <CardList robots={filterRobots}/>\r\n \t  </errorBoundry>\r\n \t</Scroll>\r\n</div>\r\n \t);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js'\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}